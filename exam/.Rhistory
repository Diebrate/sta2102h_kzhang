help(sum)
knitr::opts_chunk$set(echo = TRUE)
delta <- function(mu, lambda, x){
return((lambda*exp(-0.5*(log(x)-mu)^2)/(x*sqrt(2*pi)))/
((lambda*exp(-0.5*(log(x)-mu)^2)/(x*sqrt(2*pi))+(1-lambda)*exp(-x))))
}
em_iter <- function(mu0, lambda0, x){
mu <- mu0
lambda <- lambda0
for(i in 1:2000){
d <- numeric(0)
for(x_temp in x){
d <- c(d, delta(mu, lambda, x_temp))
}
lambda <- mean(d)
mu <- sum(d*log(x))/sum(d)
}
return(c(mu, lambda))
}
est <- em_iter(mu0=mean(log(x)), lambda0=0.5, x)
knitr::opts_chunk$set(echo = TRUE)
x <- scan("problem1.txt")
e1 <- mean(log(x)) # sample mean of ln(x)
e2 <- mean((log(x))^2) # sample mean of [ln(x)]^2
c1 <- -0.5772
c2 <- 1.9781
mu1 <- ((e2-c2)+sqrt((e2-c2)^2-4*(e1-c1)*((e1-c1)*(1-c2)+c1*(e2-c2))))/(2*(e1-c1))
mu2 <- ((e2-c2)-sqrt((e2-c2)^2-4*(e1-c1)*((e1-c1)*(1-c2)+c1*(e2-c2))))/(2*(e1-c1))
lambda1 <- (e1-c1)/(mu1-c1)
lambda2 <- (e1-c1)/(mu2-c1)
# mu has to take the value that forces lambda between 0 and 1
if(lambda1>=0 & lambda1<=1){
lambda <- lambda1
mu <- mu1
}else{
lambda <- lambda2
mu <- mu2
}
cat('lambda is', format(round(lambda, 4), nsmall=4),
'and mu is', format(round(mu, 4), nsmall=4))
delta <- function(mu, lambda, x){
return((lambda*exp(-0.5*(log(x)-mu)^2)/(x*sqrt(2*pi)))/
((lambda*exp(-0.5*(log(x)-mu)^2)/(x*sqrt(2*pi))+(1-lambda)*exp(-x))))
}
em_iter <- function(mu0, lambda0, x){
mu <- mu0
lambda <- lambda0
for(i in 1:2000){
d <- numeric(0)
for(x_temp in x){
d <- c(d, delta(mu, lambda, x_temp))
}
lambda <- mean(d)
mu <- sum(d*log(x))/sum(d)
}
return(c(mu, lambda))
}
est <- em_iter(mu0=mean(log(x)), lambda0=0.5, x)
cat('mu is', est[1], 'and lambda is', est[2])
newt_raph <- function(x0){
x_temp <- x0
for(i in 1:1000){
gradient <- c(4*exp(x_temp[1])-3+2*(x_temp[1]-x_temp[2]),
2*exp(x_temp[2])-2-2*(x_temp[1]-x_temp[2]))
hessian <- matrix(c(4*exp(x_temp[1])+2, -2, -2, 2*exp(x_temp[2])+2), nrow=2)
x_temp <- x_temp-solve(hessian)%*%gradient
}
return(x_temp)
}
newt_raph(c(0,0))
newt_raph(c(10, 10))
newt_raph(c(20, 20))
newt_raph(c(100, 100))
-sum(x)
sum(log(est[1]*dlnorm(x, meanlog=est[2])+(1-est[1])*exp(-x)))
h0 <- -sum(x)
h0
h1 <- sum(log(est[1]*dlnorm(x, meanlog=est[2])+(1-est[1])*exp(-x)))
h1
1-pchisq(-2*(h0/h1), df=1)
1-pchisq(-2*(h0-h1), df=1)
1-pchisq(-2*(h0-h1), df=1)
x <- scan("problem1.txt")
e1 <- mean(log(x)) # sample mean of ln(x)
e2 <- mean((log(x))^2) # sample mean of [ln(x)]^2
c1 <- -0.5772
c2 <- 1.9781
mu1 <- ((e2-c2)+sqrt((e2-c2)^2-4*(e1-c1)*((e1-c1)*(1-c2)+c1*(e2-c2))))/(2*(e1-c1))
mu2 <- ((e2-c2)-sqrt((e2-c2)^2-4*(e1-c1)*((e1-c1)*(1-c2)+c1*(e2-c2))))/(2*(e1-c1))
lambda1 <- (e1-c1)/(mu1-c1)
lambda2 <- (e1-c1)/(mu2-c1)
# mu has to take the value that forces lambda between 0 and 1
if(lambda1>=0 & lambda1<=1){
lambda_hat <- lambda1
mu_hat <- mu1
}else{
lambda_hat <- lambda2
mu_hat <- mu2
}
cat('lambda is', format(round(lambda_hat, 4), nsmall=4),
'and mu is', format(round(mu_hat, 4), nsmall=4))
delta <- function(mu, lambda, x){
return((lambda*exp(-0.5*(log(x)-mu)^2)/(x*sqrt(2*pi)))/
((lambda*exp(-0.5*(log(x)-mu)^2)/(x*sqrt(2*pi))+(1-lambda)*exp(-x))))
}
em_iter <- function(mu0, lambda0, x){
mu <- mu0
lambda <- lambda0
for(i in 1:2000){
d <- numeric(0)
for(x_temp in x){
d <- c(d, delta(mu, lambda, x_temp))
}
lambda <- mean(d)
mu <- sum(d*log(x))/sum(d)
}
return(c(mu, lambda))
}
est <- em_iter(mu0=mu_hat, lambda0=lambda_hat, x)
cat('mu is', est[1], 'and lambda is', est[2])
delta <- function(mu, lambda, x){
return(lambda*dlnorm(x, meanlog=mu/ lambda*dlnorm(x, meanlog=mu+(1-lambda)*exp(-x))))
}
em_iter <- function(mu0, lambda0, x){
mu <- mu0
lambda <- lambda0
for(i in 1:2000){
d <- numeric(0)
for(x_temp in x){
d <- c(d, delta(mu, lambda, x_temp))
}
lambda <- mean(d)
mu <- sum(d*log(x))/sum(d)
}
return(c(mu, lambda))
}
est <- em_iter(mu0=mu_hat, lambda0=lambda_hat, x)
cat('mu is', est[1], 'and lambda is', est[2])
delta <- function(mu, lambda, x){
return(lambda*dlnorm(x, meanlog=mu/(lambda*dlnorm(x, meanlog=mu+(1-lambda)*exp(-x)))
}
delta <- function(mu, lambda, x){
return(lambda*dlnorm(x, meanlog=mu/(lambda*dlnorm(x, meanlog=mu+(1-lambda)*exp(-x)))
}
delta <- function(mu, lambda, x){
return(lambda*dlnorm(x, meanlog=mu/(lambda*dlnorm(x, meanlog=mu+(1-lambda)*exp(-x))))
}
delta <- function(mu, lambda, x){
return(lambda*dlnorm(x, meanlog=mu)/(lambda*dlnorm(x, meanlog=mu)+(1-lambda)*exp(-x)))
}
em_iter <- function(mu0, lambda0, x){
mu <- mu0
lambda <- lambda0
for(i in 1:2000){
d <- numeric(0)
for(x_temp in x){
d <- c(d, delta(mu, lambda, x_temp))
}
lambda <- mean(d)
mu <- sum(d*log(x))/sum(d)
}
return(c(mu, lambda))
}
est <- em_iter(mu0=mu_hat, lambda0=lambda_hat, x)
cat('mu is', est[1], 'and lambda is', est[2])
qchisq(0.95)
qchisq(0.95,df=1)
1-pchisq(2*(-h0+h1), df=1)
2*(-h0+h1)
sum(c(1,2,3)*c(3,4,5))
h1 <- sum(log(est[2]*dlnorm(x, meanlog=est[1])+(1-est[2])*exp(-x)))
h1
1-pchisq(2*(-h0+h1), df=1)
coord_desc <- function(x0, y0){
z <- x0-y0
y <- y0
for(i in 1:1000){
if(y<log(1/2)){
z <- -y+log(1/2)
}else if(y>0){
z <- -y
}else{
z <- -y+log(3/4)
}
y <- log(5/(4*exp(z)+2))
}
return(c(z+y, y))
}
coord_desc(0, 0)
coord_desc <- function(x0, y0){
z <- x0-y0
y <- y0
for(i in 1:1000){
if(y<log(1/2)){
z <- -y+log(1/2)
}else if(y>0){
z <- -y
}else{
z <- -y+log(3/4)
}
y <- log(5/(4*exp(z)+2))
}
return(c(z+y, y))
}
coord_desc(0, 0)
coord_desc <- function(x0, y0){
z <- x0-y0
y <- y0
for(i in 1:1000){
if(y<log(1/2)){
z <- -y+log(1/2)
}else if(y>0){
z <- -y
}else{
z <- -y+log(3/4)
}
y <- log(5/(4*exp(z)+2))
}
return(c(z+y, y))
}
coord_desc(1, 1)
coord_desc <- function(x0, y0){
z <- x0-y0
y <- y0
for(i in 1:1000){
if(y<log(1/2)){
z <- -y+log(1/2)
}else if(y>0){
z <- -y
}else{
z <- -y+log(3/4)
}
y <- log(5/(4*exp(z)+2))
}
return(c(z+y, y))
}
res <- coord_desc(1, 1)
x <- res[1]
y <- res[2]
4*e^x+2*e^y-3*x-2*y+abs(x-y)
4*exp(x)+2*exp(y)-3*x-2*y+abs(x-y)
coord_desc <- function(x0, y0){
z <- x0-y0
y <- y0
for(i in 1:1000){
if(y<log(1/2)){
z <- -y+log(1/2)
}else if(y>0){
z <- -y
}else{
z <- 0
}
y <- log(5/(4*exp(z)+2))
}
return(c(z+y, y))
}
res <- coord_desc(1, 1)
x <- res[1]
y <- res[2]
x
y
coord_desc <- function(x0, y0){
z <- x0-y0
y <- y0
for(i in 1:1000){
if(y<log(1/2)){
z <- -y+log(1/2)
}else if(y>0){
z <- -y
}else{
z <- 0
}
y <- log(5/(4*exp(z)+2))
}
return(c(z+y, y))
}
res <- coord_desc(1, 1)
x <- res[1]
y <- res[2]
cat('x is', x, 'and y is', y)
cat('minimum g is', 4*exp(x)+2*exp(y)-3*x-2*y+abs(x-y))
coord_desc <- function(x0, y0){
z <- x0-y0
y <- y0
for(i in 1:1000){
if(y<log(1/2)){
z <- -y+log(1/2)
}else if(y>0){
z <- -y
}else{
z <- 0
}
y <- log(5/(4*exp(z)+2))
}
return(c(z+y, y))
}
res <- coord_desc(1, 1)
x <- res[1]
y <- res[2]
cat('x is', x, 'and y is', y, '\n')
cat('minimum g is', 4*exp(x)+2*exp(y)-3*x-2*y+abs(x-y))
newt_raph <- function(x0){
x_temp <- x0
for(i in 1:1000){
gradient <- c(4*exp(x_temp[1])-3+2*(x_temp[1]-x_temp[2]),
2*exp(x_temp[2])-2-2*(x_temp[1]-x_temp[2]))
hessian <- matrix(c(4*exp(x_temp[1])+2, -2, -2, 2*exp(x_temp[2])+2), nrow=2)
x_temp <- x_temp-solve(hessian)%*%gradient
}
return(x_temp)
}
ans <- newt_raph(c(0,0))
cat('x is', ans[1], 'and y is', ans[2], '\n')
cat('minimum g is', 4*exp(x)+2*exp(y)-3*x-2*y+(x-y)^2)
