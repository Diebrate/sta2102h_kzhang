}
}
p_dft <- c(p_dft, p_temp)
}
g <- numeric(0) # g of p
for(p_j in p_dft){
g <- c(g, (1-theta)/(1-theta*p_j))
}
ps <- numeric(0) # vector of p(S=s)
for(s in 0:(M-1)){
ps_temp <- 0
for(j in 0:(M-1)){
ps_temp <- ps_temp + exp(2*pi*complex(real=0,imaginary=1)*s/M*j)*g[j+1]
}
ps <- c(ps, round(Re(ps_temp/M), 6))
}
sprintf('M is %d', M)
return(ps) #jth element of ps is p(S=j-1)
}
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
get_dist_s(10, epsilon, phi, theta)
p <- numeric(0)
for(i in 0:10){
p <- c(p, choose(10, i)*0.5^10)
}
phi <- function(t){
return((1+t)^10/2^10)
}
get_dist_s <- function(x_max, epsilon, phi, theta){
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
M <- Inf
for(t in t_seq){
M_temp <- (log(1-theta)-log(1-theta*phi(t))-log(epsilon))/log(t)
if(M_temp < M){
M <- ceiling(M_temp)
} # M = min of the function
}
p_dft <- numeric(0) # dft of all the p
for(j in 0:(M-1)){
if(j > x_max){
p_dft <- c(p_dft, 0)
}else{
p_temp <- 0
for(x in 0:(x_max-1)){
p_temp <- p_temp + exp(-2*pi*complex(real=0, imaginary=1)*j/M*x)*p[x+1]
}
}
p_dft <- c(p_dft, p_temp)
}
g <- numeric(0) # g of p
for(p_j in p_dft){
g <- c(g, (1-theta)/(1-theta*p_j))
}
ps <- numeric(0) # vector of p(S=s)
for(s in 0:(M-1)){
ps_temp <- 0
for(j in 0:(M-1)){
ps_temp <- ps_temp + exp(2*pi*complex(real=0,imaginary=1)*s/M*j)*g[j+1]
}
ps <- c(ps, round(Re(ps_temp/M), 6))
}
sprintf('M is %d', M)
return(ps) #jth element of ps is p(S=j-1)
}
get_dist_s(10, epsilon, phi, theta)
p <- numeric(0)
for(i in 0:10){
p <- c(p, choose(10, i)*0.5^10)
}
phi <- function(t){
return((1+t)^10/2^10)
}
get_dist_s <- function(x_max, epsilon, phi, theta){
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
M <- Inf
for(t in t_seq){
M_temp <- (log(1-theta)-log(1-theta*phi(t))-log(epsilon))/log(t)
if(M_temp < M){
M <- ceiling(M_temp)
} # M = min of the function
}
p_dft <- numeric(0) # dft of all the p
for(j in 0:(M-1)){
if(j > x_max){
p_dft <- c(p_dft, 0)
}else{
p_temp <- 0
for(x in 0:(x_max-1)){
p_temp <- p_temp + exp(-2*pi*complex(real=0, imaginary=1)*j/M*x)*p[x+1]
}
}
p_dft <- c(p_dft, p_temp)
}
g <- numeric(0) # g of p
for(p_j in p_dft){
g <- c(g, (1-theta)/(1-theta*p_j))
}
ps <- numeric(0) # vector of p(S=s)
for(s in 0:(M-1)){
ps_temp <- 0
for(j in 0:(M-1)){
ps_temp <- ps_temp + exp(2*pi*complex(real=0,imaginary=1)*s/M*j)*g[j+1]
}
ps <- c(ps, round(Re(ps_temp/M), 6))
}
# sprintf('M is %d', M)
print(M)
return(ps) #jth element of ps is p(S=j-1)
}
get_dist_s(10, epsilon, phi, theta)
help(print)
sprintf('123')
p <- numeric(0)
for(i in 0:10){
p <- c(p, choose(10, i)*0.5^10)
}
phi <- function(t){
return((1+t)^10/2^10)
}
get_dist_s <- function(x_max, epsilon, phi, theta){ # x_max = l
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
M <- Inf
for(t in t_seq){
M_temp <- (log(1-theta)-log(1-theta*phi(t))-log(epsilon))/log(t)
if(M_temp < M){
M <- ceiling(M_temp)
} # M = min of the function
}
p_dft <- numeric(0) # dft of all the p
for(j in 0:(M-1)){
if(j > x_max){
p_dft <- c(p_dft, 0)
}else{
p_temp <- 0
for(x in 0:(x_max-1)){
p_temp <- p_temp + exp(-2*pi*complex(real=0, imaginary=1)*j/M*x)*p[x+1]
}
}
p_dft <- c(p_dft, p_temp)
}
g <- numeric(0) # g of p
for(p_j in p_dft){
g <- c(g, (1-theta)/(1-theta*p_j))
}
ps <- numeric(0) # vector of p(S=s)
for(s in 0:(M-1)){
ps_temp <- 0
for(j in 0:(M-1)){
ps_temp <- ps_temp + exp(2*pi*complex(real=0,imaginary=1)*s/M*j)*g[j+1]
}
ps <- c(ps, round(Re(ps_temp/M), 6))
}
return(list(ps, M)) #jth element of ps is p(S=j-1)
}
get_dist_s(10, epsilon, phi, theta)
get_dist_s(10, epsilon, phi, theta)[2]
get_dist_s(10, epsilon, phi, theta)[[2]]
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
abline(y=get_dist_s(x_max, epsilon, phi, theta)[[2]])
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
abline(b=get_dist_s(x_max, epsilon, phi, theta)[[2]])
help(abline)
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
abline(a=get_dist_s(x_max, epsilon, phi, theta)[[2]])
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
abline(h=get_dist_s(x_max, epsilon, phi, theta)[[2]])
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(locator(), labals=sprintf('M is %d', M))
knitr::opts_chunk$set(echo = TRUE)
hard_th <- function(x, lambda){
I = nrow(x)
J = ncol(x)
for(i in 1:I){
for(j in 1:J){
x[i,j] = ifelse(abs(x[i,j])>lambda, x[i,j], 0)
}
}
return(x)
}
soft_th <- function(x, lambda){
I = nrow(x)
J = ncol(x)
for(i in 1:I){
for(j in 1:J){
x[i,j] = sign(x[i,j]) * max(abs(x[i,j])-lambda, 0)
}
}
return(x)
}
fwht2d <- function(x){
h <- 1
len <- ncol(x)
while(h < len){
for(i in seq(1,len,by=h*2)){
for (j in seq(i,i+h-1)){
a <- x[,j]
b <- x[,j+h]
x[,j] <- a + b
x[,j+h] <- a - b
}
}
h <- 2*h
}
h <- 1
len <- nrow(x)
while(h < len){
for(i in seq(1,len,by=h*2)){
for(j in seq(i,i+h-1)){
a <- x[j,]
b <- x[j+h,]
x[j,] <- a + b
x[j+h,] <- a - b
}
}
h <- 2*h
}
x
}
design <- matrix(scan("design.txt"),ncol=256,byrow=T)
colours <- grey(seq(0,1,length=256))
image(design, axes=F, col=colours)
xhat <- fwht2d(design)
xhat_soft <- soft_th(xhat, 100)
xhat_hard <- hard_th(xhat, 200)
x_soft <- fwht2d(xhat_soft)/ncol(xhat_soft)^2
x_hard <- fwht2d(xhat_hard)/ncol(xhat_hard)^2
image(x_soft, axes=F, col=colours)
image(x_hard, axes=F, col=colours)
p <- numeric(0)
for(i in 0:10){
p <- c(p, choose(10, i)*0.5^10)
}
phi <- function(t){
return((1+t)^10/2^10)
}
get_dist_s <- function(x_max, epsilon, phi, theta){ # x_max = l
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
M <- Inf
for(t in t_seq){
M_temp <- (log(1-theta)-log(1-theta*phi(t))-log(epsilon))/log(t)
if(M_temp < M){
M <- ceiling(M_temp)
} # M = min of the function
}
p_dft <- numeric(0) # dft of all the p
for(j in 0:(M-1)){
if(j > x_max){
p_dft <- c(p_dft, 0)
}else{
p_temp <- 0
for(x in 0:(x_max-1)){
p_temp <- p_temp + exp(-2*pi*complex(real=0, imaginary=1)*j/M*x)*p[x+1]
}
}
p_dft <- c(p_dft, p_temp)
}
g <- numeric(0) # g of p
for(p_j in p_dft){
g <- c(g, (1-theta)/(1-theta*p_j))
}
ps <- numeric(0) # vector of p(S=s)
for(s in 0:(M-1)){
ps_temp <- 0
for(j in 0:(M-1)){
ps_temp <- ps_temp + exp(2*pi*complex(real=0,imaginary=1)*s/M*j)*g[j+1]
}
ps <- c(ps, round(Re(ps_temp/M), 6))
}
return(list(ps, M)) #jth element of ps is p(S=j-1)
}
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=-0.001, y=M, labals=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=-0.001, y=M, labels=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=-0.001, y=M, labels=c(sprintf('M is %d', M)))
M
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=-0.001, y=M, label=c(sprintf('M is %d', M)))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=-0.001, y=M, label=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=0.999, y=M, label=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=0.997, y=M, label=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=0.998, y=M, label=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=0.999, y=M, label=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=1, y=M, label=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=1.02, y=2*M, label=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M)
text(x=1.02, y=5*M, label=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M, colour='red')
text(x=1.02, y=5*M, label=sprintf('M is %d', M))
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M, c='red')
help(abline)
t_max <- (1/0.9*2^10)^0.1-1 # the max value for t such that phi(t)<1/theta
t_seq <- seq(1, t_max, by=(t_max-1)/100)
t_seq <- t_seq[-1] # remove t=1
t_seq <- t_seq[-length(t_seq)] # remove t_max
x_max <- 10
epsilon <- 10^-5
theta <- 0.9
plot(t_seq, (log(1-theta)-log(1-theta*phi(t_seq))-log(epsilon))/log(t_seq),
ylab='function to minimize', type='h')
M <- get_dist_s(x_max, epsilon, phi, theta)[[2]]
abline(h=M, col='red')
text(x=1.02, y=5*M, label=sprintf('M is %d', M))
